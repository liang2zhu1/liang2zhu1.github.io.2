---
layout: post
title:  "First post on GitHub using Jekyll!"
date:   2015-03-03 22:47:11
categories: Unknown
---
Spent two hours setting Jekyll up -- definitely not fun but finally got it working, here's some logs worth taking. 
I'm pretty sure I would need to get more formatting than plain text but let's not lost these thoughts before I go beyond 'Hello World' point in Jekyll. 
Why I'm trying to set up a blog? I'm learning Vi, advanced Git, and more Dev stuff, essentially a fundamental mind shift from Test->Dev. 
Why Jekyll? Of course it's not the simplest solution to set up a technical blog, through Googling 'best host for technical blog' around, I found many recommended Jekyll. Also I realized I have an account with github and that's naturally where I would like to start, without knowing what it exactly is, the journey got started. 
Why two hours, shouldn't that be done in 20 minutes? Long topic, and yes I should really learn bullet formatting in Jekyll now! :) 
1) I had no idea how Jekyll is at beginning, and I really had no idea how that would integrate with GitHub, a short demo video would help but there's just not any on GitHub or Jekyll (and yes there is something called 'youtube' but it didn't occur to me until I spent an hour on that), and what puzzles me was, except on its official blog, it was not mentioned 'jekyll new' needs to be run for first time (and of course any time you create another new site...) 
At this point I understand Jekyll (together with component it depend on) is a web server compiling 'markdown' file generating static HTML and GitHub runs a certain version of that and with some black magic already set up, all you needs to get that work on GitHub is push the folder generated by 'jekyll new' to master branch of a specially named repo on your github account, that contains 'meta' files dictating the behavior of jekyll engine as well as the 'data' files of your posts ('markdown' files) and others that I have not used but could imagine -- css, js , etc 
2) Things are quite different on *nix compared with Windows -- in Windows we have MSI, registry, etc (That said, environment variable, and of course the tree file structure was stole from *nix in DOS 2.0) As I understand at this point, Gem in Ruby = Nuget in VS
3) Searching 'Windows Jekyll' would yield a lot of posts on workaround needed -- literally what I had to do include: Add a .PERM cert trust (SSL error) , install python manually (An error saying cannot find python) , change _config.yml on build settings (A weird python error I don't know anything about at all) 

3) Demo video is very important 
3) Demo video is very important 
Your learnings 
1) Spend some time get familiar with the terminology. 
	What is 'Gem' and a GemFile? What is 'Bundler' and how bundler change the way you run ruby code? You can move forward without knowning exactly what these are but at some point you get stopped and confused when there are too many of them.
2) A good demo video worth a lot, for open source, kind of tough. 
	Finally some 30 minutes long video on youtube saved me, though I had to seek back and forth finding the exact spot that guy did differently than me, without watching it in full. 
3) Open source stuff get changed way too quick and there's very minimal support for build-to-build compatibility. 
	You almost for sure won't see tutorial with all exact version of components you are going to get by default -- you are trying installing ONE software but it likely depends on FIFTY different middle ware. Again, this is not open-source fault, it's the problem with software not built by commercial company. 
	
